import unittest
import asyncio
from unittest.mock import patch, AsyncMock
from unittest import IsolatedAsyncioTestCase
from aiogram.types import BotCommand, KeyboardButton


class TestAllKeyboards(IsolatedAsyncioTestCase):
    def setUp(self):
        # –ú–æ–∫–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –±–æ—Ç–∞, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–Ω–µ—à–Ω—è—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
        self.bot_patch = patch('keyboards.all_keyboards.bot', new_callable=AsyncMock)
        self.mock_bot = self.bot_patch.start()
        self.addCleanup(self.bot_patch.stop)

    async def test_set_commands_success(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é —É—Å—Ç–∞–Ω–æ–≤–∫—É –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        from keyboards.all_keyboards import set_commands

        # –í—ã–∑—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await set_commands()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–∑–æ–≤—ã
        self.mock_bot.set_my_commands.assert_awaited_once()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—ã–∑–æ–≤–∞
        args, _ = self.mock_bot.set_my_commands.call_args
        commands = args[0]
        self.assertEqual(len(commands), 1)
        self.assertEqual(commands[0].command, 'start')
        self.assertEqual(commands[0].description, '–°—Ç–∞—Ä—Ç')

    def test_main_kb_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
        from keyboards.all_keyboards import main_kb

        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∞–¥–º–∏–Ω–∞)
        keyboard = main_kb(123)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.assertEqual(len(keyboard.keyboard), 1)  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        self.assertEqual(len(keyboard.keyboard[0]), 2)  # –î–≤–µ –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫
        self.assertEqual(keyboard.keyboard[0][0].text, "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
        self.assertEqual(keyboard.keyboard[0][1].text, "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")

    def test_admin_kb_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        from keyboards.all_keyboards import main_kb

        # –ú–æ–∫–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        with patch('keyboards.all_keyboards.admins', [123]):
            keyboard = main_kb(123)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞
            self.assertEqual(len(keyboard.keyboard), 2)  # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ + –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            self.assertEqual(len(keyboard.keyboard[1]), 1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ –≤ –∞–¥–º–∏–Ω-—Å—Ç—Ä–æ–∫–µ
            self.assertEqual(keyboard.keyboard[1][0].text, "‚öôÔ∏è –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")

    def test_themes_inline_kb_structure(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —Ç–µ–º"""
        from keyboards.all_keyboards import themes_inline_kb

        keyboard = themes_inline_kb()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        self.assertEqual(len(keyboard.inline_keyboard), 1)  # –û–¥–Ω–∞ —Å—Ç—Ä–æ–∫–∞
        self.assertEqual(len(keyboard.inline_keyboard[0]), 1)  # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–Ω–æ–ø–∫—É
        button = keyboard.inline_keyboard[0][0]
        self.assertEqual(button.text, "–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–º—ã")
        self.assertEqual(button.callback_data, "get_themes")

    def test_keyboard_properties(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä"""
        from keyboards.all_keyboards import main_kb

        keyboard = main_kb(123)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞
        self.assertTrue(keyboard.resize_keyboard)
        self.assertTrue(keyboard.one_time_keyboard)
        self.assertEqual(keyboard.input_field_placeholder, "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é:")


if __name__ == "__main__":
    unittest.main()