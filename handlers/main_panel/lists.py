from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from keyboards.all_keyboards import main_kb
from db_handler.db_class import Database
from db_handler.db_utils import DBUtils
from create_bot import bot

db = Database()
db_utils = DBUtils(db=db, bot=bot)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ç–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def display_themes(page: int, callback: CallbackQuery):
    await db_utils.db.connect()
    try:
        items_per_page = 5
        themes = await db_utils.get_available_themes()
        if not themes:
            await callback.message.answer("‚ö†Ô∏è*–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        total_pages = (len(themes) + items_per_page - 1) // items_per_page
        if page < 0 or page >= total_pages:
            await callback.answer("‚ö†Ô∏è–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(themes))
        current_themes = themes[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìñ{theme}", callback_data=f"theme_{themes.index(theme)}")]
            for theme in current_themes
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"themes_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"themes_page_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"page_{page}")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        )

        await callback.message.edit_text(
            "**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É**üìö\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    finally:
        await db_utils.db.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–µ–º —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
async def display_subthemes(theme_id: int, page: int, callback: CallbackQuery):
    await db_utils.db.connect()
    try:
        themes = await db_utils.get_available_themes()
        if not themes or theme_id < 0 or theme_id >= len(themes):
            await callback.message.delete()
            await callback.message.answer("‚ö†Ô∏è*–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        theme_name = themes[theme_id]
        subthemes = await db_utils.get_subthemes(theme_name)
        if not subthemes:
            await callback.message.delete()
            await callback.message.answer(f"‚ö†Ô∏è*–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        items_per_page = 5
        total_pages = (len(subthemes) + items_per_page - 1) // items_per_page
        if page < 0 or page >= total_pages:
            await callback.message.delete()
            await callback.answer("‚ö†Ô∏è–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
            return

        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(subthemes))
        current_subthemes = subthemes[start_idx:end_idx]

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìã{subtheme}",
                                  callback_data=f"subtheme_{subthemes.index(subtheme)}_{theme_id}")]
            for subtheme in current_subthemes
        ])

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"subthemes_{theme_id}_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"subthemes_{theme_id}_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)

        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∏ –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"page_{page}")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ç–µ–º–∞–º", callback_data="get_themes")]
        )

        await callback.message.edit_text(
            f"**–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__**üìã\n*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É:*",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
    finally:
        await db_utils.db.close()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–∞
async def display_expert(subtheme_id: int, theme_id: int, expert_index: int, callback: CallbackQuery,
                         book_page: int = 0):
    await db_utils.db.connect()
    try:
        themes = await db_utils.get_available_themes()
        if not themes or theme_id < 0 or theme_id >= len(themes):
            await callback.message.answer("‚ö†Ô∏è*–¢–µ–º–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        theme_name = themes[theme_id]
        subthemes = await db_utils.get_subthemes(theme_name)
        if not subthemes or subtheme_id < 0 or subtheme_id >= len(subthemes):
            await callback.message.answer(f"‚ö†Ô∏è*–ü–æ–¥—Ç–µ–º–∞ –¥–ª—è __{theme_name}__ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        subtheme_name = subthemes[subtheme_id]
        recommendations = await db_utils.get_expert_recommendations(subtheme_name)
        if not recommendations:
            await callback.message.answer(f"‚ö†Ô∏è*–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç–µ–º–µ '{subtheme_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*",
                                          reply_markup=main_kb(callback.from_user.id),
                                          parse_mode="Markdown")
            await callback.answer()
            return

        experts = list(recommendations.items())
        if expert_index < 0 or expert_index >= len(experts):
            await callback.answer("‚ö†Ô∏è–≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        expert_id, info = experts[expert_index]
        theme_id_db = await db_utils.get_theme_id(theme_name, subtheme_name)
        await db_utils.log_user_activity(
            user_id=callback.from_user.id,
            activity_type='get_expert_recommendation',
            theme_id=theme_id_db
        )

        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–Ω–∏–≥
        books_per_page = 5
        total_books = len(info['books'])
        total_book_pages = (total_books + books_per_page - 1) // books_per_page

        start_idx = book_page * books_per_page
        end_idx = min(start_idx + books_per_page, total_books)
        current_books = info['books'][start_idx:end_idx]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
        response = f"üìö*{subtheme_name}*\n\n"
        response += f"üë§**{info['name']}** ‚Äî *{info['position'][0].lower() + info['position'][1:]}*\n\n"
        response += "__–ö–Ω–∏–≥–∏:__\n"

        for book_id, description in current_books:
            response += f"üìñ*{book_id}*\nüí¨{description}\n\n"

        if len(experts) > 1:
            response += f"üë®‚Äçüè´–≠–∫—Å–ø–µ—Ä—Ç {expert_index + 1} –∏–∑ {len(experts)}\n"

        if total_book_pages > 1:
            response += f"üìÑ–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–Ω–∏–≥ {book_page + 1} –∏–∑ {total_book_pages}"

        # –ö–Ω–∏–≥–∏: –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥
        book_nav_buttons = []
        if book_page > 0:
            book_nav_buttons.append(InlineKeyboardButton(
                text="‚óÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–µ –∫–Ω–∏–≥–∏",
                callback_data=f"books_{subtheme_id}_{theme_id}_{expert_index}_{book_page - 1}"
            ))
        if book_page < total_book_pages - 1:
            book_nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∏–µ –∫–Ω–∏–≥–∏ ‚ñ∫",
                callback_data=f"books_{subtheme_id}_{theme_id}_{expert_index}_{book_page + 1}"
            ))

        # –≠–∫—Å–ø–µ—Ä—Ç: –Ω–∞–∑–∞–¥/–≤–ø–µ—Ä–µ–¥
        expert_nav_buttons = []
        if expert_index > 0:
            expert_nav_buttons.append(InlineKeyboardButton(
                text="‚óÑ –ü—Ä–µ–¥—ã–¥—É—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç",
                callback_data=f"expert_{subtheme_id}_prev_{theme_id}_{expert_index}"
            ))
        if expert_index < len(experts) - 1:
            expert_nav_buttons.append(InlineKeyboardButton(
                text="–°–ª–µ–¥—É—é—â–∏–π —ç–∫—Å–ø–µ—Ä—Ç ‚ñ∫",
                callback_data=f"expert_{subtheme_id}_next_{theme_id}_{expert_index}"
            ))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        if book_nav_buttons:
            keyboard.inline_keyboard.append(book_nav_buttons)
        if expert_nav_buttons:
            keyboard.inline_keyboard.append(expert_nav_buttons)

        # –ù–∞–∑–∞–¥ –∫ –ø–æ–¥—Ç–µ–º–∞–º
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"‚óÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø–æ–¥—Ç–µ–º–∞–º",
                callback_data=f"subthemes_{theme_id}_0"
            )
        ])

        await callback.message.edit_text(response, reply_markup=keyboard, parse_mode="Markdown")
    finally:
        await db_utils.db.close()


async def handle_list(message: Message):
    await db_utils.db.connect()
    themes = await db_utils.get_available_themes()
    if not themes:
        await message.answer("‚ö†Ô∏è*–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*",
                             reply_markup=main_kb(message.from_user.id),
                             parse_mode="Markdown")
        await db_utils.db.close()
        return

    items_per_page = 5
    page = 0
    total_pages = (len(themes) + items_per_page - 1) // items_per_page
    start_idx = page * items_per_page
    end_idx = min(start_idx + items_per_page, len(themes))
    current_themes = themes[start_idx:end_idx]

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–µ–º
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"üìñ{theme}", callback_data=f"theme_{themes.index(theme)}")]
        for theme in current_themes
    ])

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
    nav_buttons = []
    if page < total_pages - 1:
        nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"themes_page_{page + 1}"))
    if nav_buttons:
        keyboard.inline_keyboard.append(nav_buttons)
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text=f"üìÑ–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"page_{page}")]
    )
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text="‚óÑ –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    )

    await message.answer(
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É**üìö\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )
    await db_utils.db.close()
