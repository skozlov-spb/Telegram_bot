import os
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.chat_action import ChatActionSender
from create_bot import admins, bot
from keyboards.all_keyboards import admin_panel_kb
from db_handler.db_utils import DBUtils  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º DBUtils –¥–ª—è –≤—ã–∑–æ–≤–∞ upload_data
from db_handler.db_class import Database

db = Database()
db_utils = DBUtils(db=db, bot=bot)

admin_router = Router()

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)


# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
class UploadData(StatesGroup):
    waiting_for_file = State()


@admin_router.message((F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")) & (F.from_user.id.in_(admins)))
async def admin_panel(message: Message):
    await message.answer(
        "**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**:",
        reply_markup=admin_panel_kb(), parse_mode="Markdown"
    )


@admin_router.callback_query(F.data.in_(['admin_get_stats', 'admin_upload_data']))
async def process_admin_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    """
    await db_utils.db.connect()
    action = callback.data
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await callback.answer()
        return

    if action == "admin_get_stats":
        stats = await db_utils.get_statistic()
        response = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['inactive_percent']}%\n"
            f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {stats['subscribed_users']}"
        )
        await callback.message.answer(response, parse_mode="Markdown")

    elif action == "admin_upload_data":
        # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞
        print('upldt')
        await state.set_state(UploadData.waiting_for_file)
        await callback.message.answer(
            "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.",
            parse_mode="Markdown"
        )

    await callback.answer()
    await db_utils.db.close()


@admin_router.message(UploadData.waiting_for_file, F.document, F.from_user.id.in_(admins))
async def process_uploaded_file(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ Excel-—Ñ–∞–π–ª–∞
    """
    await db_utils.db.connect()
    document = message.document
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")
        await state.clear()
        return

    try:
        # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç —Ñ–∞–π–ª
        async with ChatActionSender.upload_document(bot=bot, chat_id=message.chat.id):
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞
            file_path = os.path.join(DATA_DIR, document.file_name)

            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await bot.get_file(document.file_id)
            await bot.download_file(file.file_path, file_path)

            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ upload_data –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞
            success = await db_utils.upload_data(file_path)

            if success:
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
                os.remove(file_path)
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name}")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await state.clear()

    except Exception as exc:
        await message.answer(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(exc)}")
        await state.clear()
    await db_utils.db.close()


@admin_router.message(UploadData.waiting_for_file)
async def invalid_file_type(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")
