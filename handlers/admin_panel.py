import os
import asyncio
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.chat_action import ChatActionSender
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from create_bot import bot, admins
from keyboards.all_keyboards import admin_panel_kb, admin_delete_menu_kb
from db_handler.db_utils import DBUtils, get_admin_ids
from db_handler.db_class import Database
from keyboards.all_keyboards import main_kb

db_utils = DBUtils(db=Database(), bot=bot)

admin_router = Router()

DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)


class AdminActions(StatesGroup):
    waiting_for_file = State()
    waiting_book_name = State()
    waiting_broadcast_message = State()
    waiting_broadcast_confirmation = State()
    waiting_book_delete_confirmation = State()
    waiting_subtheme_delete_confirmation = State()
    waiting_expert_delete_confirmation = State()
    waiting_new_admin_id = State()


@admin_router.message((F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")) & (F.from_user.id.in_(admins)))
async def admin_panel(message: Message):
    await message.answer(
        "**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**:",
        reply_markup=admin_panel_kb(),
        parse_mode="Markdown"
    )


@admin_router.callback_query(F.data == "admin_delete_menu")
async def show_delete_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
        reply_markup=admin_delete_menu_kb()
    )
    await callback.answer()


@admin_router.callback_query(F.data.in_(
    ['admin_get_stats', 'admin_upload_data', 'admin_delete_book']))
async def process_admin_callback(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    action = callback.data
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await callback.answer()
        return

    if action == "admin_get_stats":
        stats = await db_utils.get_statistic()
        response = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['inactive_percent']}%\n"
            # f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {stats['subscribed_users']}"
        )
        await callback.message.answer(response, parse_mode="Markdown", reply_markup=main_kb(user_id))

    elif action == "admin_upload_data":
        await state.set_state(AdminActions.waiting_for_file)
        await callback.message.answer(
            "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.",
            parse_mode="Markdown"
        )

    elif action == "admin_delete_book":
        await state.set_state(AdminActions.waiting_book_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    await callback.answer()
    await db_utils.db.close()


@admin_router.callback_query(F.data.in_(['admin_select_theme', 'admin_back_to_panel']) |
                            F.data.regexp(r'^(admin_themes_page|admin_theme|admin_subthemes|admin_delete_subtheme)_'))
async def process_theme_selection(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_kb(user_id))
        await callback.answer()
        await db_utils.db.close()
        return

    action = callback.data

    if action == "admin_back_to_panel":
        await callback.message.edit_text(
            "**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**:",
            reply_markup=admin_panel_kb(),
            parse_mode="Markdown"
        )

    elif action == "admin_select_theme" or action.startswith("admin_themes_page_"):
        if action == "admin_select_theme":
            page = 0
        else:
            page = int(action.split("_")[-1])
        items_per_page = 5

        themes = await db_utils.get_available_themes()
        if not themes:
            await callback.message.answer("‚ö†Ô∏è *–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*", parse_mode="Markdown")
            await callback.answer()
            await db_utils.db.close()
            return

        total_pages = (len(themes) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(themes))
        current_themes = themes[start_idx:end_idx]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìñ {theme}",
                                  callback_data=f"admin_theme_{current_themes.index(theme) + start_idx}")]
            for theme in current_themes
        ])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"admin_themes_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"admin_themes_page_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"admin_page_{page}")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_panel")]
        )

        await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è** üìö\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*",
                                         reply_markup=keyboard, parse_mode="Markdown")

    elif action.startswith("admin_theme_") or action.startswith("admin_subthemes_"):
        if action.startswith("admin_theme_"):
            theme_id = action[len("admin_theme_"):]
            page = 0
        else:
            theme_id, page = action[len("admin_subthemes_"):].split("_")
            page = int(page)

        theme_id = int(theme_id)
        items_per_page = 5

        themes = await db_utils.get_available_themes()
        theme_name = themes[theme_id]
        subthemes = await db_utils.get_subthemes(theme_name)
        if not subthemes:
            await callback.message.answer(f"‚ö†Ô∏è *–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*", parse_mode="Markdown")
            await callback.answer()
            await db_utils.db.close()
            return

        total_pages = (len(subthemes) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(subthemes))
        current_subthemes = subthemes[start_idx:end_idx]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìã {subtheme}",
                                  callback_data=f"admin_delete_subtheme_{theme_id}_"
                                                f"{current_subthemes.index(subtheme) + start_idx}")]
            for subtheme in current_subthemes
        ])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"admin_subthemes_{theme_id}_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"admin_subthemes_{theme_id}_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"admin_page_{page}")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥ –∫ —Ç–µ–º–∞–º", callback_data=f"admin_select_theme")]
        )

        await callback.message.edit_text(f"**–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__** üìã\n*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:*",
                                         reply_markup=keyboard, parse_mode="Markdown")

    elif action.startswith("admin_delete_subtheme_"):
        theme_id, subtheme_id = action[len("admin_delete_subtheme_"):].split("_")
        subtheme_id = int(subtheme_id)
        theme_id = int(theme_id)

        themes = await db_utils.get_available_themes()
        theme_name = themes[theme_id]
        subthemes = await db_utils.get_subthemes(theme_name)
        subtheme_name = subthemes[subtheme_id]

        await state.update_data(
            theme_id=theme_id,
            subtheme_id=subtheme_id,
            theme_name=theme_name,
            subtheme_name=subtheme_name
        )

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–î–∞", callback_data="confirm_subtheme_delete"),
             InlineKeyboardButton(text="–ù–µ—Ç", callback_data="cancel_subtheme_delete")]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É ¬´_{theme_name}/{subtheme_name}_¬ª?",
            reply_markup=confirm_keyboard
        )
        await state.set_state(AdminActions.waiting_subtheme_delete_confirmation)

    await callback.answer()
    await db_utils.db.close()


@admin_router.callback_query(
    AdminActions.waiting_subtheme_delete_confirmation,
    F.data.in_(["confirm_subtheme_delete", "cancel_subtheme_delete"])
)
async def handle_subtheme_deletion(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    data = await state.get_data()
    
    if callback.data == "confirm_subtheme_delete":
        success = await db_utils.delete_selection(data['theme_name'], data['subtheme_name'])
        if success:
            await callback.message.delete()
            await callback.message.answer(
                f"‚úÖ –ü–æ–¥–±–æ—Ä–∫–∞ ¬´{data['theme_name']}/{data['subtheme_name']}¬ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                reply_markup=main_kb(callback.from_user.id)
            )
        else:
            await callback.message.delete()
            await callback.message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–±–æ—Ä–∫—É ¬´{data['theme_name']}/{data['subtheme_name']}¬ª",
                reply_markup=main_kb(callback.from_user.id)
            )
    else:
        await callback.message.delete()
        await callback.message.answer(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–±–æ—Ä–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_kb(callback.from_user.id)
        )
    
    await state.clear()
    await callback.answer()
    await db_utils.db.close()


@admin_router.callback_query(F.data.in_(['admin_select_expert', 'admin_back_to_panel']) |
                             F.data.regexp(r'^(admin_experts_page|admin_delete_expert)_'))
async def process_expert_selection(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.", reply_markup=main_kb(user_id))
        await callback.answer()
        await db_utils.db.close()
        return

    action = callback.data

    if action == "admin_back_to_panel":
        await callback.message.edit_text(
            "**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**:",
            reply_markup=admin_panel_kb(),
            parse_mode="Markdown"
        )

    elif action == "admin_select_expert" or action.startswith("admin_experts_page_"):
        if action == "admin_select_expert":
            page = 0
        else:
            page = int(action.split("_")[-1])
        items_per_page = 5

        experts = await db_utils.get_available_experts()
        if not experts:
            await callback.message.answer("‚ö†Ô∏è *–≠–∫—Å–ø–µ—Ä—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*", parse_mode="Markdown")
            await callback.answer()
            await db_utils.db.close()
            return

        total_pages = (len(experts) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(experts))
        current_experts = experts[start_idx:end_idx]

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üë§ {expert[0]} ‚Äî {expert[1][0].lower() + expert[1][1:]}",
                                  callback_data=f"admin_delete_expert_{current_experts.index(expert) + start_idx}")]
            for expert in current_experts
        ])

        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"admin_experts_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"admin_experts_page_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"admin_page_{page}")]
        )
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_back_to_panel")]
        )

        await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è** üë§\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ —ç–∫—Å–ø–µ—Ä—Ç—ã:*",
                                         reply_markup=keyboard, parse_mode="Markdown")

    elif action.startswith("admin_delete_expert_"):
        expert_id = int(action[len("admin_delete_expert_"):])
        experts = await db_utils.get_available_experts()
        expert_name, expert_position = experts[expert_id]

        await state.update_data(
            expert_id=expert_id,
            expert_name=expert_name,
            expert_position=expert_position
        )

        confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_expert_delete"),
             InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_expert_delete")]
        ])
        
        await callback.message.edit_text(
            f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞?\n{expert_name} ({expert_position})",
            reply_markup=confirm_keyboard
        )
        await state.set_state(AdminActions.waiting_expert_delete_confirmation)

    await callback.answer()
    await db_utils.db.close()


@admin_router.callback_query(
    AdminActions.waiting_expert_delete_confirmation,
    F.data.in_(["confirm_expert_delete", "cancel_expert_delete"])
)
async def handle_expert_deletion(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    data = await state.get_data()
    
    if callback.data == "confirm_expert_delete":
        success = await db_utils.delete_expert(data['expert_name'], data['expert_position'])
        if success:
            await callback.message.delete()
            await callback.message.answer(
                f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç '{data['expert_name']} ({data['expert_position']})' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!",
                reply_markup=main_kb(callback.from_user.id)
            )
        else:
            await callback.message.delete()
            await callback.message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–∞ '{data['expert_name']} ({data['expert_position']})'",
                reply_markup=main_kb(callback.from_user.id)
            )
    else:
        await callback.message.delete()
        await callback.message.answer(
            "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ —ç–∫—Å–ø–µ—Ä—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=main_kb(callback.from_user.id)
        )
    
    await state.clear()
    await callback.answer()
    await db_utils.db.close()


@admin_router.message(AdminActions.waiting_for_file, F.document, F.from_user.id.in_(admins))
async def process_uploaded_file(message: Message, state: FSMContext):
    await db_utils.db.connect()
    document = message.document
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).", reply_markup=main_kb(message.from_user.id))
        await state.clear()
        return

    try:
        async with ChatActionSender.upload_document(bot=bot, chat_id=message.chat.id):
            file_path = os.path.join(DATA_DIR, document.file_name)
            file = await bot.get_file(document.file_id)
            await bot.download_file(file.file_path, file_path)

            success = await db_utils.upload_data(file_path)

            if success:
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!", reply_markup=main_kb(message.from_user.id))
                os.remove(file_path)
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name}", reply_markup=main_kb(message.from_user.id))

            await state.clear()

    except Exception as exc:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(exc)}", reply_markup=main_kb(message.from_user.id))
        await state.clear()
    await db_utils.db.close()


@admin_router.message(AdminActions.waiting_book_name, F.from_user.id.in_(admins))
async def process_book_name(message: Message, state: FSMContext):
    await state.update_data(book_name=message.text)
    
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm_delete"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel_delete")
        ]
    ])
    
    await message.answer(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É?\n–ù–∞–∑–≤–∞–Ω–∏–µ: {message.text}",
        reply_markup=confirm_keyboard
    )
    await state.set_state(AdminActions.waiting_book_delete_confirmation)
    
    
@admin_router.callback_query(
    AdminActions.waiting_book_delete_confirmation,
    F.data.in_(["confirm_delete", "cancel_delete"])
)
async def handle_delete_confirmation(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    try:
        data = await state.get_data()
        
        if callback.data == "confirm_delete":
            book_name = data['book_name']
            success = await db_utils.delete_book(book_name)
            
            if success:
                await callback.message.answer(
                    f"‚úÖ –ö–Ω–∏–≥–∞ '{book_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!",
                    reply_markup=admin_panel_kb()
                )
            else:
                await callback.message.answer(
                    f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '{book_name}'",
                    reply_markup=admin_panel_kb()
                )
        else:
            await callback.message.answer(
                "‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
                reply_markup=admin_panel_kb()
            )
            
    except Exception as e:
        await callback.message.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏", reply_markup=admin_panel_kb())
    
    await state.clear()
    await callback.answer()
    await db_utils.db.close()


@admin_router.message(AdminActions.waiting_for_file)
async def invalid_file_type(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).", reply_markup=main_kb(message.from_user.id))


# @admin_router.callback_query(F.data == "admin_broadcast")
# async def start_broadcast(callback: CallbackQuery, state: FSMContext):
#     await state.set_state(AdminActions.waiting_broadcast_message)
#     await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
#     await callback.answer()


@admin_router.callback_query(F.data == "admin_back_to_menu")
async def back_to_main_menu(callback: CallbackQuery):
    try:
        await callback.message.delete()
    except TelegramBadRequest:
        pass
    
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=main_kb(callback.from_user.id)
    )
    await callback.answer()
    

@admin_router.message(
    AdminActions.waiting_broadcast_message,
    F.from_user.id.in_(admins),
    F.content_type.in_({'text', 'photo'})  # –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ
)
async def process_broadcast_message(message: Message, state: FSMContext):
    await db_utils.db.connect()
    try:
        subscribers = await db_utils.get_subscribed_users()
        
        if not subscribers:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=admin_panel_kb())
            await state.clear()
            return

        content_data = {}
        if message.photo:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –∏ –ø–æ–¥–ø–∏—Å—å (–µ—Å–ª–∏ –µ—Å—Ç—å)
            content_data['photo_id'] = message.photo[-1].file_id
            content_data['caption'] = message.caption if message.caption else ""
            content_type = 'photo'
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            content_data['text'] = message.text
            content_type = 'text'

        await state.update_data(
            content_type=content_type,
            content_data=content_data,
            subscribers_count=len(subscribers)
        )  # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–∫—Ä—ã–≤–∞—é—â–∞—è —Å–∫–æ–±–∫–∞

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        confirm_text = (
            "‚úâÔ∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {len(subscribers)}\n"
            f"–¢–∏–ø: {'–§–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º' if content_type == 'photo' else '–¢–µ–∫—Å—Ç'}\n"
        )

        if content_type == 'photo':
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ –≤ –ø—Ä–µ–≤—å—é
            confirm_text += f"–¢–µ–∫—Å—Ç –∫ —Ñ–æ—Ç–æ: {content_data['caption']}\n" if content_data['caption'] else ""
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–≤—å—é —Å —Ñ–æ—Ç–æ
            await message.answer_photo(
                photo=content_data['photo_id'],
                caption=confirm_text.strip(),
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
                     InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
                ])
            )
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø—Ä–µ–≤—å—é
            confirm_text += f"\n–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{content_data['text']}"
            await message.answer(
                confirm_text,
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_broadcast"),
                     InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_broadcast")]
                ])
            )

        await state.set_state(AdminActions.waiting_broadcast_confirmation)

    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}", reply_markup=admin_panel_kb())
        await state.clear()
    
    finally:
        await db_utils.db.close()


@admin_router.callback_query(
    AdminActions.waiting_broadcast_confirmation,
    F.data.in_(["confirm_broadcast", "cancel_broadcast"])
)
async def handle_broadcast_confirmation(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    try:
        data = await state.get_data()
        
        if callback.data == "confirm_broadcast":
            subscribers = await db_utils.get_subscribed_users()
            success_count = 0
            
            for user_id in subscribers:
                try:
                    if data['content_type'] == 'photo':
                        await bot.send_photo(
                            chat_id=user_id,
                            photo=data['content_data']['photo_id'],
                            caption=data['content_data']['caption'] if data['content_data']['caption'] else None
                        )
                    else:
                        await bot.send_message(
                            chat_id=user_id,
                            text=data['content_data']['text']
                        )
                    success_count += 1
                    await asyncio.sleep(0.1)  
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            
            report = (
                f"üì¨ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n"
                f"–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {data['subscribers_count']}\n"
                f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count}\n"
                f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {data['subscribers_count'] - success_count}"
            )
            
            await callback.message.answer(report, reply_markup=admin_panel_kb())
            
        else:
            await callback.message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", reply_markup=admin_panel_kb())

    except Exception as e:
        await callback.message.answer(f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: {str(e)}", reply_markup=admin_panel_kb())
    
    finally:
        await state.clear()
        await callback.answer()
        await db_utils.db.close()


@admin_router.callback_query(F.data == "admin_add_admin")
async def add_admin_start(callback: CallbackQuery, state: FSMContext):
    await state.set_state(AdminActions.waiting_new_admin_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º(—É–∑–Ω–∞—Ç—å –µ–≥–æ –º–æ–∂–Ω–æ —Ç—É—Ç: @getmyid_bot):",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_cancel_add")]
        ])
    )
    await callback.answer()


@admin_router.callback_query(F.data == "admin_cancel_add")
async def cancel_add_admin(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.answer(
        "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=admin_panel_kb()
    )
    await callback.answer()


@admin_router.message(AdminActions.waiting_new_admin_id, F.text)
async def process_admin_id(message: Message, state: FSMContext):
    try:
        new_admin_id = int(message.text)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        try:
            user = await bot.get_chat(new_admin_id)
        except Exception:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
        if new_admin_id not in admins:
            await db_utils.db.connect()

            await db_utils.assign_admin_role(new_admin_id)

            await db_utils.db.close()
            admins.append(new_admin_id)
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î
            await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.full_name} (@{user.username}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")
        else:
            await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

        await state.clear()
        await message.answer(
            "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:",
            reply_markup=admin_panel_kb()
        )

    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä")
