import os
from aiogram import F, Router
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.chat_action import ChatActionSender
from create_bot import admins, bot
from keyboards.all_keyboards import admin_panel_kb
from db_handler.db_utils import DBUtils
from db_handler.db_class import Database

db = Database()
db_utils = DBUtils(db=db, bot=bot)

admin_router = Router()

DATA_DIR = "data"
if not os.path.exists(DATA_DIR):
    os.makedirs(DATA_DIR)


class AdminActions(StatesGroup):
    waiting_for_file = State()
    waiting_book_name = State()
    waiting_theme_data = State()
    waiting_expert_data = State()


@admin_router.message((F.text.endswith("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å")) & (F.from_user.id.in_(admins)))
async def admin_panel(message: Message):
    await message.answer(
        "**–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏**:",
        reply_markup=admin_panel_kb(),
        parse_mode="Markdown"
    )


@admin_router.callback_query(F.data.in_(
    ['admin_get_stats', 'admin_upload_data', 'admin_delete_book', 'admin_delete_selection', 'admin_delete_expert']))
async def process_admin_callback(callback: CallbackQuery, state: FSMContext):
    await db_utils.db.connect()
    action = callback.data
    user_id = callback.from_user.id

    if user_id not in admins:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        await callback.answer()
        return

    if action == "admin_get_stats":
        stats = await db_utils.get_statistic()
        response = (
            f"üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞**:\n"
            f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {stats['inactive_percent']}%\n"
            f"–ü–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É: {stats['subscribed_users']}"
        )
        await callback.message.answer(response, parse_mode="Markdown")

    elif action == "admin_upload_data":
        await state.set_state(AdminActions.waiting_for_file)
        await callback.message.answer(
            "üì§ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ Excel-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.",
            parse_mode="Markdown"
        )

    elif action == "admin_delete_book":
        await state.set_state(AdminActions.waiting_book_name)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

    elif action == "admin_delete_selection":
        await state.set_state(AdminActions.waiting_theme_data)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏ –ø–æ–¥—Ç–µ–º—É —á–µ—Ä–µ–∑ '|' (–ø—Ä–∏–º–µ—Ä: –§–∏–∑–∏–∫–∞|–ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞):")

    elif action == "admin_delete_expert":
        await state.set_state(AdminActions.waiting_expert_data)
        await callback.message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è —ç–∫—Å–ø–µ—Ä—Ç–∞ –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ '|' (–ø—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤|–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä):")

    await callback.answer()
    await db_utils.db.close()


@admin_router.message(AdminActions.waiting_for_file, F.document, F.from_user.id.in_(admins))
async def process_uploaded_file(message: Message, state: FSMContext):
    await db_utils.db.connect()
    document = message.document
    if not document.file_name.endswith(('.xlsx', '.xls')):
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")
        await state.clear()
        return

    try:
        async with ChatActionSender.upload_document(bot=bot, chat_id=message.chat.id):
            file_path = os.path.join(DATA_DIR, document.file_name)
            file = await bot.get_file(document.file_id)
            await bot.download_file(file.file_path, file_path)

            success = await db_utils.upload_data(file_path)

            if success:
                await message.answer(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
                os.remove(file_path)
            else:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞ {document.file_name}")

            await state.clear()

    except Exception as exc:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(exc)}")
        await state.clear()
    await db_utils.db.close()


@admin_router.message(AdminActions.waiting_book_name, F.from_user.id.in_(admins))
async def process_book_name(message: Message, state: FSMContext):
    await db_utils.db.connect()
    book_name = message.text.strip()
    success = await db_utils.delete_book(book_name)
    if success:
        await message.answer(f"‚úÖ –ö–Ω–∏–≥–∞ '{book_name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    else:
        await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–∏–≥—É '{book_name}'")
    await state.clear()
    await db_utils.close()


@admin_router.message(AdminActions.waiting_theme_data, F.from_user.id.in_(admins))
async def process_theme_data(message: Message, state: FSMContext):
    await db_utils.db.connect()
    try:
        theme_name, subtheme_name = message.text.split('|', 1)
        success = await db_utils.delete_selection(
            theme_name.strip(),
            subtheme_name.strip()
        )
        if success:
            await message.answer(f"‚úÖ –ü–æ–¥–±–æ—Ä–∫–∞ '{theme_name.strip()}/{subtheme_name.strip()}' —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await message.answer("‚ùå –ü–æ–¥–±–æ—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –§–∏–∑–∏–∫–∞|–ö–≤–∞–Ω—Ç–æ–≤–∞—è –º–µ—Ö–∞–Ω–∏–∫–∞")
    await state.clear()
    await db_utils.db.close()



@admin_router.message(AdminActions.waiting_expert_data, F.from_user.id.in_(admins))
async def process_expert_data(message: Message, state: FSMContext):
    await db_utils.db.connect()
    try:
        expert_name, expert_position = message.text.split('|', 1)
        success = await db_utils.delete_expert(
            expert_name.strip(),
            expert_position.strip()
        )
        if success:
            await message.answer(f"‚úÖ –≠–∫—Å–ø–µ—Ä—Ç '{expert_name.strip}' —É–¥–∞–ª–µ–Ω!")
        else:
            await message.answer("‚ùå –≠–∫—Å–ø–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤|–ü—Ä–æ—Ñ–µ—Å—Å–æ—Ä")
    await state.clear()
    await db_utils.db.close()

@admin_router.message(AdminActions.waiting_for_file)
async def invalid_file_type(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (.xlsx –∏–ª–∏ .xls).")