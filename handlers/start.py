from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db_handler.db_utils import DBUtils
from db_handler.db_class import Database

from keyboards.all_keyboards import main_kb, themes_inline_kb
from create_bot import bot

start_router = Router()
db_utils = DBUtils(db=Database(), bot=bot)


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ú–µ–Ω—é',
                         reply_markup=main_kb(message.from_user.id))


@start_router.message(Command('start_2'))
async def cmd_start_2(message: Message):
    await message.answer('–ú–µ–Ω—é 2',
                         reply_markup=create_spec_kb())


@start_router.message(F.text == '–ø—Ä–∏–≤–µ—Ç')
async def cmd_start_3(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!')

@start_router.message(F.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
async def expert_recommendation(message: Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:",
        reply_markup=themes_inline_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@start_router.callback_query()
async def process_callback(callback: CallbackQuery):
    data = callback.data

    if data == "get_themes":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        themes: List[str] =  await db_utils.get_available_themes()
        if not themes:
            await callback.message.answer("–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=theme, callback_data=f"theme_{theme}")]
            for theme in themes
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)

    elif data.startswith("theme_"):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
        theme_name = data[len("theme_"):]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º
        subthemes: List[str] =  await db_utils.get_subthemes(theme_name)
        if not subthemes:
            await callback.message.answer(f"–ü–æ–¥—Ç–µ–º—ã –¥–ª—è {theme_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=subtheme, callback_data=f"subtheme_{subtheme}")]
            for subtheme in subthemes
        ])
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É –¥–ª—è {theme_name}:", reply_markup=keyboard)

    elif data.startswith("subtheme_"):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥—Ç–µ–º—ã
        subtheme_name = data[len("subtheme_"):]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        recommendations: Optional[dict] = await db_utils.get_expert_recommendations(subtheme_name)
        if not recommendations:
            await callback.message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {subtheme_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        response = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {subtheme_name}:\n\n"
        for book_id, info in recommendations.items():
            response += (
                f"üìñ *–ö–Ω–∏–≥–∞*: {info['book_name']}\n"
                f"üë§ *–≠–∫—Å–ø–µ—Ä—Ç*: {info['expert_name']} ({info['expert_position']})\n"
                f"üí¨ *–û–ø–∏—Å–∞–Ω–∏–µ*: {info['description']}\n\n"
            )

        await callback.message.edit_text(response, parse_mode="Markdown")

    await callback.answer()
