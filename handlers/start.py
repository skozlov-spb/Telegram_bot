from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db_handler.db_utils import DBUtils
from db_handler.db_class import Database

from keyboards.all_keyboards import main_kb, themes_inline_kb
from create_bot import bot

start_router = Router()

db = Database()
db_utils = DBUtils(db=db, bot=bot)


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await db_utils.db.connect()
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.full_name
    is_new_user = await db_utils.register_user(user_id, username)
    
    await message.answer('**–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!** üéâ\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é –Ω–∏–∂–µ:',
                         reply_markup=main_kb(message.from_user.id), parse_mode="Markdown")
    await db_utils.db.close()


@start_router.message(F.text == "–ü—Ä–∏–≤–µ—Ç")
async def cmd_start_3(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç! üòä *–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å!*')


@start_router.message(F.text == "üìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è")
async def cmd_start_3(message: Message):
    await db_utils.db.connect()
    user_id = message.from_user.id
    await db_utils.log_user_activity(user_id, activity_type='get_recommenadation', theme_id=None)
    await db_utils.db.close()
    await message.answer('**–í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...**', parse_mode="Markdown")


@start_router.message(F.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
async def expert_recommendation(message: Message):
    await message.answer(
        "**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π** üìñ\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å:",
        reply_markup=themes_inline_kb(), parse_mode="Markdown"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
@start_router.callback_query()
async def process_callback(callback: CallbackQuery):
    data = callback.data
    await db_utils.db.connect()

    if data.startswith("themes_page_") or data == "get_themes":
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ç–µ–º
        if data == "get_themes":
            page = 0
        else:
            page = int(data.split("_")[-1])
        items_per_page = 5

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç–µ–º
        themes = await db_utils.get_available_themes()
        if not themes:
            await callback.message.answer("‚ö†Ô∏è *–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.*")
            await callback.answer()
            return

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(themes) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(themes))
        current_themes = themes[start_idx:end_idx]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìñ {theme}", callback_data=f"theme_{current_themes.index(theme) + start_idx}")]
            for theme in current_themes
        ])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"themes_page_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"themes_page_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"page_{page}")])

        await callback.message.edit_text("**–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É** üìö\n*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:*", reply_markup=keyboard,
                                         parse_mode="Markdown")

    elif data.startswith("theme_") or data.startswith("subthemes_"):
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –ø–æ–¥—Ç–µ–º
        if data.startswith("theme_"):
            theme_id = data[len("theme_"):]
            page = 0
        else:
            theme_id, page = data[len("subthemes_"):].split("_")
            page = int(page)

        theme_id = int(theme_id)
        items_per_page = 5

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º
        themes = await db_utils.get_available_themes()
        theme_name = themes[theme_id]
        subthemes = await db_utils.get_subthemes(theme_name)
        if not subthemes:
            await callback.message.answer(f"‚ö†Ô∏è *–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*", parse_mode="Markdown")
            await callback.answer()
            return

        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        total_pages = (len(subthemes) + items_per_page - 1) // items_per_page
        start_idx = page * items_per_page
        end_idx = min(start_idx + items_per_page, len(subthemes))
        current_subthemes = subthemes[start_idx:end_idx]

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=f"üìã {subtheme}",
                                  callback_data=f"subtheme_{current_subthemes.index(subtheme) + start_idx}_{theme_id}")]
            for subtheme in current_subthemes
        ])

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        nav_buttons = []
        if page > 0:
            nav_buttons.append(
                InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"subthemes_{theme_id}_{page - 1}"))
        if page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"subthemes_{theme_id}_{page + 1}"))
        if nav_buttons:
            keyboard.inline_keyboard.append(nav_buttons)
        keyboard.inline_keyboard.append(
            [InlineKeyboardButton(text=f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1} –∏–∑ {total_pages}", callback_data=f"page_{page}")])

        await callback.message.edit_text(f"**–ü–æ–¥—Ç–µ–º—ã –¥–ª—è __{theme_name}__** üìã\n*–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É:*",
                                         reply_markup=keyboard, parse_mode="Markdown")

    elif data.startswith("subtheme_") or data.startswith("expert_"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if data.startswith("subtheme_"):
            subtheme_id, theme_id = data[len("subtheme_"):].split("_")
            current_index = 0
        else:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º—ã –∏ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ callback
            subtheme_id, action, theme_id = data[len("expert_"):].split("_")
            current_index = int(callback.message.reply_markup.inline_keyboard[-1][0].callback_data.split("_")[-1])
            if action == "next":
                current_index += 1
            elif action == "prev":
                current_index -= 1
        subtheme_id = int(subtheme_id)
        theme_id = int(theme_id)

        themes = await db_utils.get_available_themes()
        theme_name = themes[theme_id]

        subthemes = await db_utils.get_subthemes(theme_name)
        subtheme_name = subthemes[subtheme_id]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        recommendations = await db_utils.get_expert_recommendations(subtheme_name)
        if not recommendations:
            await callback.message.answer(f"‚ö†Ô∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è __{subtheme_name}__ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.*",
                                          parse_mode="Markdown")
            await callback.answer()
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        experts = list(recommendations.items())
        if current_index < 0 or current_index >= len(experts):
            await callback.answer("‚ö†Ô∏è –ë–æ–ª—å—à–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        expert_id, info = experts[current_index]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        theme_id = await db_utils.get_theme_id(theme_name, subtheme_name)
        await db_utils.log_user_activity(user_id=callback.from_user.id, activity_type='get_expert_recommendation', theme_id=theme_id)
        
        response = f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è __{subtheme_name}__** üìö\n\n"
        response += f"üë§ **{info['name']}** *({info['position']})*\n\n"
        response += "__–ö–Ω–∏–≥–∏:__\n"
        for book_id, description in info['books']:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ book_id
            book_name = book_id
            response += f"üìñ *{book_name}*\nüí¨ {description}\n\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        buttons = []
        if current_index > 0:
            buttons.append(InlineKeyboardButton(text="‚óÑ –ù–∞–∑–∞–¥", callback_data=f"expert_{subtheme_id}_prev_{theme_id}"))
        if current_index < len(experts) - 1:
            buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚ñ∫", callback_data=f"expert_{subtheme_id}_next_{theme_id}"))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            buttons,
            [InlineKeyboardButton(text=f"üë®‚Äçüè´ –≠–∫—Å–ø–µ—Ä—Ç {current_index + 1} –∏–∑ {len(experts)}",
                                  callback_data=f"index_{current_index}")]
        ])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)

    await callback.answer()
    await db_utils.db.close()
