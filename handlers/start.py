from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from db_handler.db_utils import DBUtils
from db_handler.db_class import Database

from keyboards.all_keyboards import main_kb, themes_inline_kb
from create_bot import bot

start_router = Router()


@start_router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer('–ú–µ–Ω—é',
                         reply_markup=main_kb(message.from_user.id))


@start_router.message(F.text == '–ø—Ä–∏–≤–µ—Ç')
async def cmd_start_3(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç!')


@start_router.message(F.text == "üìö –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
async def expert_recommendation(message: Message):
    await message.answer(
        "–ù–∞–∂–º–∏—Ç–µ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å —Ç–µ–º—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤:",
        reply_markup=themes_inline_kb()
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
@start_router.callback_query()
async def process_callback(callback: CallbackQuery):
    data = callback.data
    db_utils = DBUtils(db=Database(), bot=bot)
    await db_utils.db.connect()

    if data == "get_themes":
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–º
        themes = await db_utils.get_available_themes()
        if not themes:
            await callback.message.answer("–¢–µ–º—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–π —Ç–µ–º—ã
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=theme, callback_data=f"theme_{theme}")]
            for theme in themes
        ])
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É:", reply_markup=keyboard)

    elif data.startswith("theme_"):
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–µ–º—ã
        theme_name = data[len("theme_"):]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º
        subthemes = await db_utils.get_subthemes(theme_name)
        if not subthemes:
            await callback.message.answer(f"–ü–æ–¥—Ç–µ–º—ã –¥–ª—è {theme_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–æ–¥—Ç–µ–º
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=subtheme, callback_data=f"subtheme_{subtheme}")]
            for subtheme in subthemes
        ])
        await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ç–µ–º—É –¥–ª—è {theme_name}:", reply_markup=keyboard)

    elif data.startswith("subtheme_") or data.startswith("expert_"):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        if data.startswith("subtheme_"):
            subtheme_name = data[len("subtheme_"):]
            current_index = 0
        else:
            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–¥—Ç–µ–º—ã –∏ –∏–Ω–¥–µ–∫—Å–∞ –∏–∑ callback
            subtheme_name, action = data[len("expert_"):].split("_")
            current_index = int(callback.message.reply_markup.inline_keyboard[-1][0].callback_data.split("_")[-1])
            if action == "next":
                current_index += 1
            elif action == "prev":
                current_index -= 1

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —ç–∫—Å–ø–µ—Ä—Ç–æ–≤
        recommendations = await db_utils.get_expert_recommendations(subtheme_name)
        if not recommendations:
            await callback.message.answer(f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {subtheme_name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            await callback.answer()
            return

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ –∏–Ω–¥–µ–∫—Å—É
        experts = list(recommendations.items())
        if current_index < 0 or current_index >= len(experts):
            await callback.answer("–ë–æ–ª—å—à–µ —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –Ω–µ—Ç.")
            return

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç–µ–∫—É—â–µ–≥–æ —ç–∫—Å–ø–µ—Ä—Ç–∞
        expert_id, info = experts[current_index]

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        response = f"**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è {subtheme_name}**\n\n"
        response += f"üë§ **{info['name']}** ({info['position']})\n"
        response += "üìö **–ö–Ω–∏–≥–∏**:\n"
        for book_id, description in info['books']:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–Ω–∏–≥–∏ –ø–æ book_id
            book_name = book_id
            response += f"üìñ {book_name}\nüí¨ {description}\n\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è
        buttons = []
        if current_index > 0:
            buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"expert_{subtheme_name}_prev"))
        if current_index < len(experts) - 1:
            buttons.append(InlineKeyboardButton(text="–í–ø–µ—Ä–µ–¥ ‚û°Ô∏è", callback_data=f"expert_{subtheme_name}_next"))

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            buttons,
            [InlineKeyboardButton(text=f"–≠–∫—Å–ø–µ—Ä—Ç {current_index + 1}/{len(experts)}",
                                  callback_data=f"index_{current_index}")]
        ])

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await callback.message.edit_text(response, parse_mode="Markdown", reply_markup=keyboard)

    await callback.answer()
    await db_utils.db.close()
